#include <iostream>
#include <cctype>
#include <vector>
#include <stack>
#include <queue>
#include <fstream>
#include <string>
#include <limits>
#include <algorithm>
#include "imptext.h"

using namespace std;

void clear()
{
    system ("clear");
}

inline void WaitEnter()
    {
        cout <<endl<<"PRESIONE 'ENTER' PARA CONTINUAR"<<endl;
        while (cin.get()!='\n');
    }

string intento(int intentos) {
    string respuesta;
    switch (intentos) {
        case 0:
            clear();
            respuesta = "Inserte una opcion valida";
            break;
        case 1:
            clear();
            respuesta = "Inserte una opcion valida";
            break;
        case 2:
            clear();
            respuesta = "Inserte una opcion valida";
            break;
        case 3:
            clear();
            respuesta = "Ultima oportunidad, inserte una opcion valida";
            break;
        case 4: 
            clear();
            respuesta = "Adios...";
            break;
        case 5:
            clear();
            respuesta = " ";
            break;
    }
    return respuesta;
}

class Contacto
{
private:
    string icono;
    string nombre;
    string correo;
    bool favorito;
    string numero;
    int contador;
public:
    Contacto()
    {}
    Contacto(string i, string n, string c, string num)
    {
        icono = i;
        nombre = n;
        correo = c;
        numero = num;
    }
    
    string get_nombre() const
    {
        return nombre;
    }
    void set_nombre(string n)
    {
        nombre = n;
    }
    string get_correo()
    {
        return correo;
    }
    void set_correo(string c)
    {
        correo = c;
    }
    string get_numero()
    {
        return numero;
    }
    void set_numero(string num)
    {
        numero = num;
    }
    int get_contador()
    {
        return contador;
    }
    string get_icono()
    {
        return icono;
    }
    void set_icono(char i)
    {
        icono = i;
    }
    bool get_favorito()
    {
        return favorito;
    }
    void set_favorito(int f)
    {
        favorito = f;
    }
    string to_string()
    {
        string separacion = ", ";
        return icono + separacion + nombre + separacion + correo + separacion + numero;
    }
    
    friend ostream& operator<<(ostream& os, Contacto& b)
    {
		return os << b.to_string();
    }
    
    void print_contacto()
    {
        cout << *this;
    }
    
};

// Creacion de los vectores necesarios para almacenar los contactos 
vector<Contacto> general;		// Todos los contactos agregados por el usuario
vector<Contacto> favoritos;		// Todos los contactos agregados a favoritos por el usuario	
vector<Contacto> recientes;		// Todos los contactos agregados a recientes automaticamente 
	|		
// El vector de recientes tiene una funcion especial, se programo solo para guardar maximo cinco contactos,
// sin embargo, se programo para que cuando exista un sexto contacto, se elimine el contacto mas antiguo entre los recientes,
// para asi entonces dar espacio al nuevo contaco reciente

// Metodo que nos va a ayudar a mostrar al usuario dato por dato hasta que el vector quede vacio, 
// en este caso se usara para mostrale al ususario los contactos almacenados en los vectores
void print(vector<Contacto>& lista){
  for(int i=0; i < lista.size(); i++){
      cout << lista[i] << endl;
  }
}

// Metodo que recorre indice por indice de un vector hasta encontrar el elemento, en este caso dado por un usuario
int buscar_con(vector<Contacto>& lista, const string& elemento) {
    for (int i = 0; i < lista.size(); ++i) {
        if (lista[i].get_nombre() == elemento) {
            return i; 
        }
    }
    return -1; 
}

// ---------> falta explicar

void ordenar_general() {
    sort(general.begin(), general.end(), [](const Contacto& a, const Contacto& b) {
        return a.get_nombre() < b.get_nombre(); // sortea el vector en orden alfabético
    });
}

void ordenar_favoritos() {
    sort(favoritos.begin(), favoritos.end(), [](const Contacto& a, const Contacto& b) {
        return a.get_nombre() < b.get_nombre(); // sortea el vector en orden alfabético
    });
}

void anadir_contacto(){   
    bool n = true;
    string ic;
    int intentos = 0;
    
    do{
        
        cout<<"Ingrese los datos del contacto:"<<endl<<"Icono (Único carácter):"<<endl<<"Lista de iconos"<<endl;
        calltext("listaicon.txt");
        int ans;
        
        if (!(cin >> ans)) {
            cout << intento(intentos++) << endl;
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            if (intentos >= 5) {
                exit(EXIT_SUCCESS);
            }
            continue;  
        }
        
            switch(ans){
                case 1:
            
                    ic = "Ø";
                    n = false;
                
                    break;
                case 2:
                
                    ic = "£";
                    n = false;
                
                    break;
                
                case 3:
                
                    ic = "ƒ";
                    n = false;
                
                    break;
                case 4:
                
                    ic = "Ð";
                    n = false;
                
                    break;
                case 5:
                
                    ic = "Ð";
                    n = false;
                
                    break;
                case 6:
                
                    ic = "¥";
                    n = false;
                
                    break;
                case 7:
                
                    ic = "¶";
                    n = false;
                
                    break;
                case 8:
                
                    ic = "§";
                    n = false;
                
                    break;
                case 9:
                
                    cout<<"Ingrese un carácter:"<<endl;
                    cin>>ic;
                    n = false;
                    ic = ic[0];
                    break;
                
                default:
                    clear();
                    cout << "Ingrese un valor valido (1-9)" << endl;
                    break;
        
                }
    }while(n);
    
    clear();
    cin.ignore(); 
    string no;
    cout<<"Nombre:"<<endl;
    getline(cin, no);
    clear();
    
    cout<<"Correo:"<<endl;
    string co;
    cin>>co;
    cin.ignore();
    clear();
 
    cout<<"Número (sin espacios):"<<endl;
    string nu;
    cin>>nu;
    clear();
    cin.ignore(); 
    
    Contacto con (ic,no,co,nu);
    
    cout<<"El Contacto se ve así"<<endl;
    con.print_contacto();
    
    cout<<endl<<"Desea editar el contacto?"<<endl<<"         'Y' , 'N'"<<endl;
    string ans2;
    cin>>ans2;
    
    if(ans2 == "Y" || ans2 == "y")
    {
        anadir_contacto();
    }
    else if (ans2 == "N" || ans2 == "n")
    {
        general.push_back(con);
        cout<<"Contacto agregado.";
        clear();
    }
    
    cout<<endl<<"Desea agregar el contacto a favoritos?"<<endl<<"         'Y' , 'N'"<<endl;
    string ans3;
    cin>>ans3;
    
    if(ans3 == "Y" || ans3 == "y")
    {cout << "No se guardo el contacto" <<endl;
        clear();
        favoritos.push_back(con);
        cout << "El contacto se agrego a favoritos" << endl;
    }
    else if (ans3 == "N" || ans3 == "n")
    {
        clear();
    }

    cout<<endl<<"Desea añadir otro contacto?"<<endl<<"         'Y' , 'N'"<<endl;
    string ans4;
    cin>>ans4;
    
    if(ans4 == "Y" || ans4 == "y")
    {
        clear();
        anadir_contacto();
    }
    else if (ans4 == "N" || ans4 == "n")
    {
        clear();
    }
        
    ordenar_general();
    ordenar_favoritos();
}

// El metodo revisa si el vector de contactos en general esta vacio, si lo esta le muestra al usuario que no tiene contactos agregados,
// si tiene al menos un contacto se muestran los contactos con la informacion correspondiente 
void revisar_lista()
{
    if(general.empty()){
        cout << "No tienes ningun contacto agregado" << endl;
    }else{
        cout << "Estos son todos tus contactos: " << endl; 
        print(general);
    }
}

// El metodo es similar al anterior, solo que esta ves revisa los contactos en favoritos, si esta vacio 
// le muestra al usuario que no tiene contactos agregados en favoritos, si tiene al menos un contacto 
// se muestran los contactos con la informacion correspondiente 
void revisar_favoritos()
{
    if(favoritos.empty()){
        cout << "No tienes ningun contacto en favoritos" << endl;
    }else{
        cout << "Estos son tus contactos favoritos: " << endl; 
        print(favoritos);
    }
}

// El metodo es similar al los anteriores, solo que esta ves revisa los contactos recientes, si esta vacio 
// le muestra al usuario que no tiene contactos agregados en recientes, si tiene al menos un contacto 
// se muestran los contactos con la informacion correspondiente 
void revisar_recientes()
{
    if(recientes.empty()){
        cout << "No tienes ningun contacto en recientes" << endl;
    }else{
        cout << "Estos son tus 5 contactos más recientes: " << endl; 
        print(recientes);
    }
}

// Este metodo lo que hace es almacenar el nombre que el usuario desea eliminar, este se almacena y con el metodo implementado arriba
// 'buscar_con' se busca ese contacto en los tres vectores, por cada vector que tenga ese contacto, se elimina 
void eliminar_contacto()
{
    string con_eliminar;
    int resultado;
    int resultado2;
    int resultado3;
    
    cout << "Cual es el nombre del contacto que desea eliminar" << endl;

    // Sirve para guardar el nombre con espacios si es necesario
    getline(cin, con_eliminar);
    
    resultado = buscar_con(general, con_eliminar);
    resultado2 = buscar_con(favoritos, con_eliminar);
    resultado3 = buscar_con(recientes, con_eliminar);
    
    if(resultado != -1){
        general.erase(general.begin() + resultado);
        cout << "El contacto fue eliminado con exito" << endl;
    }else{
        cout << "El contacto que quiere eliminar no se encuentra entre tus contactos" << endl; 
    }
    
    if(resultado2 != -1){
        favoritos.erase(favoritos.begin() + resultado2);
        cout << "El contacto fue eliminado con exito de tu lista de favoritos" << endl;
    }else{
        cout << "El contacto que quiere eliminar no se encuentra entre tus contactos favoritos" << endl; 
    }
    
    if(resultado3 != -1){
        recientes.erase(recientes.begin() + resultado3);
        cout << "El contacto fue eliminado con exito de tu lista de recientes" << endl;
    }else{
        cout << "El contacto que quiere eliminar no se encuentra entre tus contactos recientes" << endl; 
    }
}

// Este metodo tiene la misma estructura que el anterior, sin embargo, este solo busca el contacto dentro del vector de favoritos
void eliminar_favorito()
{
    string con_eliminar;
    int resultado;
    
    cout << "Cual es el nombre del contacto que desea eliminar de su lista de favoritos" << endl;

    getline(cin, con_eliminar);
    
    resultado = buscar_con(favoritos, con_eliminar);
    
    if(resultado != -1){
        favoritos.erase(favoritos.begin() + resultado);
        cout << "El contacto fue eliminado con exito de tu lista de favoritos" << endl;
    }else{
        cout << "El contacto que quiere eliminar no se encuentra entre tus contactos favoritos" << endl; 
    }
    
}

// Este metodo lo que hace es almacenar el nombre del contacto que desea buscar el usuario y buscarlo en el vector general,
// si este se encuentra se mostrara al usuario el contacto con toda la informacion correspondiente,
// adicionalmente el comtacto buscado sera agregado al vector de recientes
void buscar_contacto()
{
    Contacto con;
    string con_buscar;
    int resultado;
    
    cout << "Nombre del contacto a buscar ?" << endl;
    
    getline(cin, con_buscar);
    
    resultado = buscar_con(general, con_buscar);
    
    con = general[resultado];

// Condicional que nos ayudara a que el vector de recientes tenga como maximo cinco contactos
    if(resultado != -1){
        cout << "El contacto se encontro" << endl;
        con.print_contacto();
        
        if (recientes.size() >= 5) 
        {
        recientes.erase(recientes.begin()); 
        }
    
        recientes.push_back(con);
    }else{
        cout << "El contacto desea buscar no esta en tu lista de contactos" << endl; 
    }
}

int main()
{   
    calltext("title.txt");
    
    WaitEnter();
    clear();
    bool m = true;
    int ans;
    int intentos = 0;
    
    do{

        cout<<"Bienvenido a WhosApp, El directorio de contactos #1 de UR y (debatiblemente) del mundo"<<endl<<endl<<"-Que desea hacer hoy?"<<endl;
        cout<<"1. Añadir Contacto"<<endl<<"2. Revisar lista de contactos"<<endl<<"3. Revisar favoritos"<<endl<<"4. Revisar recientes"<<endl<<"5. Eliminar contacto"<<endl<<"6. Eliminar favorito"<<endl<<"7. Buscar contacto"<<endl<< "8. Editar contacto"<<endl<<"9. Salir"<<endl;
        
        if (!(cin >> ans)) {
            cout << intento(intentos++) << endl;
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            if (intentos >= 5) {
                exit(EXIT_SUCCESS);
            }
            continue;  
        }
    
        switch(ans)
        {   
            // Añadir contacto
            case 1:
                clear();
                anadir_contacto();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                break;
            // Revisar lista
            case 2:
                clear();
                revisar_lista();
                break;
            // Revisar favoritos
            case 3:
                clear();
                revisar_favoritos();
                break;
            // Revisar recientes
            case 4:
                clear();
                revisar_recientes();
                break;
            // Eliminar contacto
            case 5:
                clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                eliminar_contacto();
                break;
            // Eliminar de favorito
            case 6:
                clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                eliminar_favorito();
                break;
            // Buscar contacto
            case 7:
                clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                buscar_contacto();
                break;
            // Editar contacto
            case 8:
                clear();
                break; 
            // Salir
            case 9:
                cout<<"Adios :D"<<endl;
                m = false;
                break;
            default:
                clear();
		cout << "Ingrese un valor valido (1-7)" << endl;
                break;
        }
        
    }while(m);
    
    return 0;
}
