#include <iostream>
#include <iomanip>
#include <cctype>
#include <vector>
#include <stack>
#include <sstream>
#include <queue>
#include <fstream>
#include <string>
#include <limits>
#include <algorithm>
#include <chrono>
#include <ctime>
#include "imptext.h"

using namespace std;

void clear()
{
    system ("clear");
}

inline void WaitEnter()
    {
        cout <<endl<<"PRESIONE 'ENTER' PARA CONTINUAR"<<endl;
        while (cin.get()!='\n');
    }

string intento(int intentos) {
    string respuesta;
    switch (intentos) {
        case 0:
            clear();
            respuesta = "Inserte una opcion valida";
            break;
        case 1:
            clear();
            respuesta = "Inserte una opcion valida";
            break;
        case 2:
            clear();
            respuesta = "Inserte una opcion valida";
            break;
        case 3:
            clear();
            respuesta = "Ultima oportunidad, inserte una opcion valida";
            break;
        case 4: 
            clear();
            respuesta = "Adios...";
            break;
        case 5:
            clear();
            respuesta = " ";
            break;
    }
    return respuesta;
}

class Contacto
{
private:
    string icono;
    string nombre;
    string correo;
    bool favorito;
    string numero;
    string direccion;
    int contador;
public:
    Contacto()
    {}
    Contacto(string i, string n, string c, string num, string dir)
    {
        icono = i;
        nombre = n;
        correo = c;
        numero = num;
        direccion = dir;
    }
    
    string get_nombre() const
    {
        return nombre;
    }
    
    void set_nombre(string n)
    {
        nombre = n;
    }
    string get_correo()
    {
        return correo;
    }
    void set_correo(string c)
    {
        correo = c;
    }
    string get_numero()
    {
        return numero;
    }
    string get_direccion() const
    {
        return nombre;
    }
    
    void set_direccion(string d)
    {
        direccion = d;
    }
    void set_numero(string num)
    {
        numero = num;
    }
    int get_contador()
    {
        return contador;
    }
    string get_icono()
    {
        return icono;
    }
    void set_icono(char i)
    {
        icono = i;
    }
    bool get_favorito()
    {
        return favorito;
    }
    void set_favorito(int f)
    {
        favorito = f;
    }
    string to_string() const
    {
        string separacion = ", ";
        return icono + separacion + nombre + separacion + correo + separacion + numero + separacion + direccion;
    }
    
    friend ostream& operator<<(ostream& os, Contacto& b)
    {
		return os << b.to_string();
    }
    
    void print_contacto()
    {
        cout << *this;
    }
    
};

vector<Contacto> general;
vector<Contacto> favoritos;
vector<Contacto> recientes;

void print(vector<Contacto>& lista){
  for(int i=0; i < lista.size(); i++){
      cout << lista[i] << endl;
  }
}

int buscar_con(vector<Contacto>& lista, const string& elemento) {
    for (int i = 0; i < lista.size(); ++i) {
        if (lista[i].get_nombre() == elemento) {
            return i; 
        }
    }
    return -1; 
}

void ordenar_general() {
    sort(general.begin(), general.end(), [](const Contacto& a, const Contacto& b) {
        return a.get_nombre() < b.get_nombre(); // sortea el vector en orden alfabético
    });
}

void ordenar_favoritos() {
    sort(favoritos.begin(), favoritos.end(), [](const Contacto& a, const Contacto& b) {
        return a.get_nombre() < b.get_nombre(); // sortea el vector en orden alfabético
    });
}

void anadir_contacto(){   
    bool n = true;
    string ic;
    int intentos = 0;
    
    do{
        
        cout<<"Ingrese los datos del contacto:"<<endl<<"Icono (Único carácter):"<<endl<<"Lista de iconos"<<endl;
        calltext("listaicon.txt");
        int ans;
        
        if (!(cin >> ans)) {
            cout << intento(intentos++) << endl;
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            if (intentos >= 5) {
                exit(EXIT_SUCCESS);
            }
            continue;  
        }
        
            switch(ans){
                case 1:
            
                    ic = "Ø";
                    n = false;
                
                    break;
                case 2:
                
                    ic = "£";
                    n = false;
                
                    break;
                
                case 3:
                
                    ic = "ƒ";
                    n = false;
                
                    break;
                case 4:
                
                    ic = "Ð";
                    n = false;
                
                    break;
                case 5:
                
                    ic = "Ð";
                    n = false;
                
                    break;
                case 6:
                
                    ic = "¥";
                    n = false;
                
                    break;
                case 7:
                
                    ic = "¶";
                    n = false;
                
                    break;
                case 8:
                
                    ic = "§";
                    n = false;
                
                    break;
                case 9:
                
                    cout<<"Ingrese un carácter:"<<endl;
                    cin>>ic;
                    n = false;
                    ic = ic[0];
                    break;
                
                default:
                    clear();
                    cout << "Ingrese un valor valido (1-9)" << endl;
                    break;
        
                }
    }while(n);
    
    clear();
    cin.ignore(); 
    string no;
    cout<<"Nombre:"<<endl;
    getline(cin, no);
    clear();
    
    cout<<"Correo:"<<endl;
    string co;
    cin>>co;
    cin.ignore();
    clear();
 
    cout<<"Número (sin espacios):"<<endl;
    string nu;
    cin>>nu;
    clear();
    cin.ignore(); 
    
    string dir;
    cout<<"Direccion:"<<endl;
    getline(cin, dir);
    clear();
    
    Contacto con (ic,no,co,nu,dir);
    
    cout<<"El Contacto se ve así"<<endl;
    con.print_contacto();
    
    cout<<endl<<"Desea editar el contacto?"<<endl<<"         'Y' , 'N'"<<endl;
    string ans2;
    cin>>ans2;
    
    if(ans2 == "Y" || ans2 == "y")
    {
        anadir_contacto();
    }
    else if (ans2 == "N" || ans2 == "n")
    {
        general.push_back(con);
        cout<<"Contacto agregado.";
        clear();
    }
    
    cout<<endl<<"Desea agregar el contacto a favoritos?"<<endl<<"         'Y' , 'N'"<<endl;
    string ans3;
    cin>>ans3;
    
    if(ans3 == "Y" || ans3 == "y")
    {cout << "No se guardo el contacto" <<endl;
        clear();
        favoritos.push_back(con);
        cout << "El contacto se agrego a favoritos" << endl;
    }
    else if (ans3 == "N" || ans3 == "n")
    {
        clear();
    }

    cout<<endl<<"Desea añadir otro contacto?"<<endl<<"         'Y' , 'N'"<<endl;
    string ans4;
    cin>>ans4;
    
    if(ans4 == "Y" || ans4 == "y")
    {
        clear();
        anadir_contacto();
    }
    else if (ans4 == "N" || ans4 == "n")
    {
        clear();
    }
    
    if (recientes.size() >= 5) 
    {
        recientes.erase(recientes.begin()); 
    }
    
    recientes.push_back(con);
    
    ordenar_general();
    ordenar_favoritos();
}

void revisar_lista()
{
    if(general.empty()){
        cout << "No tienes ningun contacto agregado" << endl;
    }else{
        cout<<"Usted tiene "<<general.size()<<" contactos"<<endl;
        cout << "Estos son todos tus contactos: " << endl; 
        print(general);
    }
}

void revisar_favoritos()
{
    if(favoritos.empty()){
        cout << "No tienes ningun contacto en favoritos" << endl;
    }else{
        cout << "Estos son tus contactos favoritos: " << endl; 
        print(favoritos);
    }
}

void revisar_recientes()
{
    if(recientes.empty()){
        cout << "No tienes ningun contacto en recientes" << endl;
    }else{
        cout << "Estos son tus 5 contactos más recientes: " << endl; 
        print(recientes);
    }
}

void eliminar_contacto()
{
    string con_eliminar;
    int resultado;
    int resultado2;
    int resultado3;
    
    cout << "Cual es el nombre del contacto que desea eliminar" << endl;

    getline(cin, con_eliminar);
    
    resultado = buscar_con(general, con_eliminar);
    resultado2 = buscar_con(favoritos, con_eliminar);
    resultado3 = buscar_con(recientes, con_eliminar);
    
    if(resultado != -1){
        general.erase(general.begin() + resultado);
        cout << "El contacto fue eliminado con exito" << endl;
    }else{
        cout << "El contacto que quiere eliminar no se encuentra entre tus contactos" << endl; 
    }
    
    if(resultado2 != -1){
        favoritos.erase(favoritos.begin() + resultado2);
        cout << "El contacto fue eliminado con exito de tu lista de favoritos" << endl;
    }else{
        cout << "El contacto que quiere eliminar no se encuentra entre tus contactos favoritos" << endl; 
    }
    
    if(resultado3 != -1){
        recientes.erase(recientes.begin() + resultado3);
        cout << "El contacto fue eliminado con exito de tu lista de recientes" << endl;
    }else{
        cout << "El contacto que quiere eliminar no se encuentra entre tus contactos recientes" << endl; 
    }
}

void eliminar_favorito()
{
    string con_eliminar;
    int resultado;
    
    cout << "Cual es el nombre del contacto que desea eliminar de su lista de favoritos" << endl;

    getline(cin, con_eliminar);
    
    resultado = buscar_con(favoritos, con_eliminar);
    
    if(resultado != -1){
        favoritos.erase(favoritos.begin() + resultado);
        cout << "El contacto fue eliminado con exito de tu lista de favoritos" << endl;
    }else{
        cout << "El contacto que quiere eliminar no se encuentra entre tus contactos favoritos" << endl; 
    }
    
}

void buscar_contacto()
{
    Contacto con;
    string con_buscar;
    int resultado;
    
    cout << "Nombre del contacto a buscar ?" << endl;
    
    getline(cin, con_buscar);
    
    resultado = buscar_con(general, con_buscar);
    
    con = general[resultado];
    
    if(resultado != -1){
        cout << "El contacto se encontro" << endl;
        con.print_contacto();
        
        if (recientes.size() >= 5) 
        {
        recientes.erase(recientes.begin()); 
        }
    
        recientes.push_back(con);
    }else{
        cout << "El contacto desea buscar no esta en tu lista de contactos" << endl; 
    }
}

void editar_contacto()
{
    string edt_nom;
    int pos;

    cout << "Ingrese el nombre del contacto que desea editar: ";
    getline(cin, edt_nom);

    // Buscar el contacto
    pos = buscar_con(general, edt_nom);

    if (pos != -1)
    {
        int ans_edt;
        string nuevo_nombre;
        string nuevo_correo;
        string nuevo_numero;
        string nueva_direccion;

        do {
            cout << "Menú de Edición:" << endl
                 << "1. Editar Nombre" << endl
                 << "2. Editar Correo" << endl
                 << "3. Editar Número" << endl
                 << "4. Editar direccion" << endl
                 << "5. Volver atrás" << endl
                 << "Seleccione una opción: ";

            if (!(cin >> ans_edt))
            {
                cout << "Ingrese una opción válida." << endl;
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                continue;
            }

            cin.ignore();

            switch (ans_edt)
            {
                case 1:
                    cout << "Ingrese el nuevo nombre: ";
                    getline(cin, nuevo_nombre);
                    general[pos].set_nombre(nuevo_nombre);
                    clear();
                    cout << "Nombre actualizado con éxito." << endl;
                    break;
                
                case 2: 
                    cout << "Ingrese el nuevo correo: ";
                    getline(cin, nuevo_correo);
                    general[pos].set_correo(nuevo_correo);
                    clear();
                    cout << "Correo actualizado con éxito." << endl;
                    break;
                
                case 3: 
                    cout << "Ingrese el nuevo número: ";
                    getline(cin, nuevo_numero);
                    general[pos].set_numero(nuevo_numero);
                    clear();
                    cout << "Número actualizado con éxito." << endl;
                    break;
                    
                case 4: 
                    cout << "Ingrese la nueva direccion: ";
                    getline(cin, nueva_direccion);
                    general[pos].set_direccion(nueva_direccion);
                    clear();
                    cout << "Número actualizado con éxito." << endl;
                    break;
                
                case 5:
                    clear();
                    cout << "Volviendo atrás..." << endl;
                    break;
                default:
                    clear();
                    cout << "Ingrese una opción válida." << endl;
            }
        }
        while (ans_edt != 4);
    }
    else
    {
        cout << "El contacto no fue encontrado." << endl;
    }
}

void grupo_letra()
{
    char busc_letr;
    int pos;

    cout << "Ingrese la letra que desea buscar: ";
    cin>> busc_letr;
    int i = 0;
    int contador = 0;
    while(i<general.size()){
        if(general[i].get_nombre()[0] == busc_letr){
            cout<<general[i]<<endl;
            contador++;
        }
        i++;
    }
    if (contador == 0){
        cout<<"No hay ningún contacto guardado con esta letra"<<endl;
    }
    
}

Contacto analizar_contacto(const string& line)
{
    stringstream ss(line);
    string icono, nombre, correo, numero, direccion;

    getline(ss, icono, ',');
    getline(ss, nombre, ',');
    getline(ss, correo, ',');
    getline(ss, numero, ',');
    getline(ss, direccion);

    return Contacto(icono, nombre, correo, numero, direccion);
}

const string nombre_copia_prefijo = "copia_seguridad_";

void copia_contactos(const vector<Contacto>& contacts)
{
    auto now = chrono::system_clock::now();
    auto time = chrono::system_clock::to_time_t(now);
    stringstream ss;
    ss << put_time(localtime(&time), "%Y%m%d%H%M%S");
    string timestamp = ss.str();

    string nombre_copia = nombre_copia_prefijo + timestamp + ".txt";

    ofstream copia(nombre_copia);
    if (!copia.is_open())
    {
        cerr << "Error: No fue posible crear la copia de seguridad" << endl;
        return;
    }

    for (const auto& contact : contacts) {
        copia << contact.to_string() << "\n";
    }

    copia.close();
    cout << "Copia de seguridad creada exitosamente: " << nombre_copia << endl;
}

void lista_copias() {
    ifstream copia(nombre_copia_prefijo);
    if (!copia.is_open()) {
        cout << "No hay copias disponibles." << endl;
        return;
    }

    cout << "Copias disponibles:" <<endl;
    string line;
    while (getline(copia, line)) {
        cout << line << endl;
    }

    copia.close();
}


void cargar_copia(vector<Contacto>& contacts)
{
    string ans_copia;
    cout << "Ingrese el nombre de la copia que quiere cargar: ";
    cin >> ans_copia;

    ifstream copia(ans_copia);
    if (!copia.is_open())
    {
        cerr << "Error: No fue posible abrir la copia de seguridad." << endl;
        return;
    }
    
    general.clear();
    favoritos.clear();
    recientes.clear();

    string line;
    while (getline(copia, line))
    {
        Contacto contacto = analizar_contacto(line);
        general.push_back(contacto);
        if (recientes.size() >= 5)
        {
            recientes.erase(recientes.begin());
        }

        recientes.push_back(contacto);
    }

    copia.close();
    cout << "Copia cargada exitosamente." << endl;
}

void tamano(){
    int opc = 0; //variables
    bool valido;
    cout<<"Ingrese si quiere ver:"<<endl<<"1. La cantidad de contactos en la lista general"<<endl<<"2. Ver la cantidad de contactos en favoritos"<<endl;
    cin>> opc;
    
    switch(opc){
        case 1:
            if(general.size()==0){ //si no hay contactos en general
                cout<<"No hay contactos guardados"<<endl;
                break;
            }
            else{ //muestra la cantidad
                cout<<"Hay "<<general.size()<<" contactos guardados"<<endl;
                break;
            }
        case 2: //si no hay contactos en favoritos
            if(favoritos.size()==0){
                cout<<"No hay contactos agregados en favoritos"<<endl;
                break;
            }
            else{
                cout<<"Hay "<<favoritos.size()<<" contactos agregados en favoritos"<<endl;
                break;
            }
        default: //si la opción digitada no es valida
            cout<<"Esto no es una opción valida, digite nuevamente"<<endl;
            tamano();
            break;
    }
}

int main()
{   
    calltext("title.txt");
    
    WaitEnter();
    clear();
    bool m = true;
    int ans;
    int intentos = 0;
    
    do{

        cout<<"Bienvenido a WhosApp, El directorio de contactos #1 de UR y (debatiblemente) del mundo"<<endl;
        cout<< "-Que desea hacer hoy?" << endl
            << "1. Añadir Contacto" << endl
            << "2. Revisar lista de contactos" << endl
            << "3. Revisar favoritos" << endl
            << "4. Revisar recientes" << endl
            << "5. Eliminar contacto" << endl
            << "6. Eliminar favorito" << endl
            << "7. Buscar contacto" << endl
            << "8. Editar contacto" << endl
            << "9. Buscar un contacto mediante una letra" << endl
            <<"10. Ver la cantidad de contactos"<<endl
            << "11. Guardar copia de seguridad" << endl
            << "12. Cargar copia de seguridad" << endl
            << "13. Salir" << endl;
        
        if (!(cin >> ans)) {
            cout << intento(intentos++) << endl;
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            if (intentos >= 5) {
                exit(EXIT_SUCCESS);
            }
            continue;  
        }
    
        switch(ans)
        {   
            // Añadir contacto
            case 1:
                clear();
                anadir_contacto();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                break;
            // Revisar lista
            case 2:
                clear();
                revisar_lista();
                break;
            // Revisar favoritos
            case 3:
                clear();
                revisar_favoritos();
                break;
            // Revisar recientes
            case 4:
                clear();
                revisar_recientes();
                break;
            // Eliminar contacto
            case 5:
                clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                eliminar_contacto();
                break;
            // Eliminar de favorito
            case 6:
                clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                eliminar_favorito();
                break;
            // Buscar contacto
            case 7:
                clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                buscar_contacto();
                break;
            // Editar contacto
            case 8:
                clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
		            editar_contacto();
                break; 
            //ver el grupo de contactos segun la letra
            case 9:
                clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
		        grupo_letra();
                break;
            //Guardar copia de seguridad
            case 10:
                clear();
                tamano();
                break;
            // Salir
            case 11:
                clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                copia_contactos(general);
                cout << "Copia de seguridad guardada exitosamente." << endl;
                break;
            //Cargar copia de seguridad
            case 12:
                clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cargar_copia(general);
                cout << "Copia de seguridad cargada exitosamente." << endl;
                break;
            // Salir
            case 13:
                cout << "Adios :D" << endl;
                m = false;
                break;
                
            default:
                clear();
                cout << "Ingrese un valor valido (1-13)" << endl;
                break;
        }
        
    } while(m);
    
    return 0;
}